% Generated by roxygen2 (4.1.1): do not edit by hand
% Please edit documentation in R/cv_abm.R
\name{cv_abm}
\alias{cv_abm}
\title{Estimate and Test an ABM}
\usage{
cv_abm(data, features, Formula, k, agg_patterns, abm_simulate,
  tseries_len = 8, package = c("caretglm", "caretglmnet", "glm",
  "caretnnet", "caretdnn"), sampling = FALSE, STAT = c("mean", "median"),
  saving = FALSE, filename = NULL, abm_vars = NULL, abm_optim = c("GA",
  "DE"), validate = c("lgocv", "cv"), folds = ifelse(validate == "lgocv",
  max(data$group), 10), repeat_cv = 1, drop_nzv = TRUE, verbose = TRUE,
  predict_test_par = FALSE)
}
\arguments{
\item{data}{data.frame full dataset with all individual decisions with}

\item{features}{list}

\item{Formula}{list}

\item{k}{numeric vector length one}

\item{agg_patterns}{data.frame}

\item{abm_simulate}{function with model, features, and parameters args}

\item{tseries_len}{optional numeric vector length one}

\item{package}{optional charac vector length one: "caretglm", "caretglmnet", "glm", "caretnnet", "caretdnn"}

\item{sampling}{optional logical vector, FALSE}

\item{STAT}{optional charac vector length one: "mean", "median"}

\item{saving}{= FALSE}

\item{filename}{= NULL}

\item{abm_vars}{a list if not null}

\item{abm_optim}{= c("GA", "DE")}

\item{validate}{= c("lgocv", "cv")}

\item{folds}{= ifelse(validate == "lgocv", max(data$group), 10)}

\item{repeat_cv}{= 1}

\item{drop_nzv}{= TRUE}

\item{verbose}{= TRUE}

\item{predict_test_par}{= FALSE}
}
\value{
Returns an S4 object of class cv_abm.
}
\description{
\code{cv_abm} uses cross-validation to test an ABM's predictive power.
}
\details{
The function returns an S4 object.
See \linkS4class{cv_abm} for the details of the slots
(objects) that this type of object will have.
}
\examples{
# Create data:
cdata <- data.frame(period = rep(1:10, 1000),
                   outcome = rep(1:2, 5000),
                   my.decision1 = sample(1:0, 10000, TRUE),
                   other.decision1 = sample(1:0, 10000, TRUE))
# Create ABM
simulate_abm <- function(model, features, parameters, tseries_len, noise, threshold = 0.5, iterations = 1250, STAT = "mean"){
 matrixOut <- data.frame()
 list(dynamics = dynamics, action_avg = action_avg, simdata = matrixOut)
 }
}


% Generated by roxygen2 (4.1.1): do not edit by hand
% Please edit documentation in R/cv_abm.R
\name{cv_abm}
\alias{cv_abm}
\title{Estimate and Test an ABM}
\usage{
cv_abm(data, features, Formula, k, agg_patterns, abm_simulate,
  tseries_len = 8, package = c("caretglm", "caretglmnet", "glm",
  "caretnnet", "caretdnn"), sampling = FALSE, STAT = c("mean", "median"),
  saving = FALSE, filename = NULL, abm_vars = NULL, abm_optim = c("GA",
  "DE"), validate = c("lgocv", "cv"), folds = ifelse(validate == "lgocv",
  max(data$group), 10), repeat_cv = 1, drop_nzv = TRUE, verbose = TRUE,
  predict_test_par = FALSE)
}
\arguments{
\item{data}{data.frame full dataset with all individual decisions with}

\item{features}{list}

\item{Formula}{list}

\item{k}{numeric vector length one}

\item{agg_patterns}{data.frame with rows (observational unit being the group)
and columns: (a.) all those needed for the prediction with the specified formula (with same names as the vars in the form)
(b.) a column named "action" with the proportion of the action taken in that group,
 (c.) columns named paste(seq(tseries_len)) with the mean/median levels (STAT) of the action for each time period.}

\item{abm_simulate}{function with model, features, and parameters args}

\item{tseries_len}{optional numeric vector length one}

\item{package}{optional charac vector length one: "caretglm", "caretglmnet", "glm", "caretnnet", "caretdnn"}

\item{sampling}{optional logical vector, FALSE}

\item{STAT}{optional charac vector length one: "mean", "median"}

\item{saving}{= FALSE}

\item{filename}{= NULL}

\item{abm_vars}{a list if not null}

\item{abm_optim}{= c("GA", "DE")}

\item{validate}{= c("lgocv", "cv")}

\item{folds}{= ifelse(validate == "lgocv", max(data$group), 10)}

\item{repeat_cv}{= 1}

\item{drop_nzv}{= TRUE}

\item{verbose}{= TRUE}

\item{predict_test_par}{= FALSE}
}
\value{
Returns an S4 object of class cv_abm.
}
\description{
\code{cv_abm} uses cross-validation to test an ABM's predictive power.
}
\details{
The function returns an S4 object.
See \linkS4class{cv_abm} for the details of the slots
(objects) that this type of object will have.
}
\examples{
# Helper fuction:
period_vec_create <- function(datasubset, periods,
                             STAT = "mean"){
 period_vec <- rep(NA, length(periods))
 for (i in seq(periods)){
   if (nrow(datasubset[datasubset$period==i, ]) > 0){
     period_vec[i] <- do.call(STAT,
                              list(x = as.numeric(datasubset[datasubset$period==i, which(names(datasubset) \%in\% "outcome")]),
                                   na.rm = TRUE))
     # period_vec[i] <- mean(datasubset[datasubset$period==i, which(names(datasubset) \%in\% "decision_p")], na.rm = TRUE)
   } else{
     period_vec[i] <- NA
   }
 }
 stopifnot(length(period_vec)==periods)
 period_vec
}
# Create data:
cdata <- data.frame(period = rep(seq(10), 1000),
                   outcome = rep(0:1, 5000),
                   my.decision1 = sample(1:0, 10000, TRUE),
                   other.decision1 = sample(1:0, 10000, TRUE),
                   group = c(rep(1, 5000), rep(2, 5000)))
time_len <- 2
agg_patterns <- data.frame(group = c(1,2),
                          action = c( mean(as.numeric(cdata[cdata$group==1, "outcome"])),
                                      mean(as.numeric(cdata[cdata$group==2, "outcome"]))),
                          c(period_vec_create(cdata[cdata$group==1, ], time_len)[1],
                            period_vec_create(cdata[cdata$group==2, ], time_len)[1]),
                          c(period_vec_create(cdata[cdata$group==1, ], time_len)[2],
                            period_vec_create(cdata[cdata$group==2, ], time_len)[2]))
names(agg_patterns)[3:4] <- c("1", "2")

# Create ABM:
simulate_abm <- function(model, features, parameters, time_len, noise,
                        threshold = 0.5, iterations = 1250, STAT = "mean"){
 matrixOut <- data.frame(period = rep(1:10, 1000),
                         outcome = rep(0:1, 5000),
                         my.decision1 = sample(1:0, 10000, TRUE),
                         other.decision1 = sample(1:0, 10000, TRUE))
 action_avg <- mean(matrixOut$outcome, na.rm=TRUE)
 dynamics <- period_vec_create(matrixOut, time_len)
 list(dynamics = dynamics, action_avg = action_avg, simdata = matrixOut)
}
# Create features and formula lists:
k <- 1
features <- as.list(rep(NA, k)) # create list to fill
features[[1]] <- c("my.decision1", "other.decision1")
Formula <- as.list(rep(NA, k)) # create list to fill
Formula[[1]] <- "outcome ~ my.decision1 + other.decision1"
# Call cv_abm():
res <- cv_abm(cdata, features, Formula, k, agg_patterns,
             abm_simulate = simulate_abm,
             tseries_len = time_len,
             package = "caretglm",
             sampling = FALSE,
             STAT = "mean",
             saving = FALSE, filename = NULL,
             abm_vars  = list(noise = 0.25, threshold = 0.50),
             validate = c("lgocv"),
             drop_nzv = FALSE,
             verbose = TRUE,
             predict_test_par = FALSE)
cat(res@diagnostics)
}

